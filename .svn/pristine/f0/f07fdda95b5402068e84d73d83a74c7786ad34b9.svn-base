package com.aotain.project.gdtelecom;

import java.io.IOException;
import java.net.URI;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.MultipleInputs;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;


public class DevicCheckDetail extends Configured implements Tool {
    public int run(String[] args) throws Exception {                  
		if( args.length != 3) {
			return 1;
		}
		
    	Configuration conf = new Configuration(); 
		
		String inputPaths = args[0];
		String targetPath = args[1];
		String date =  args[2];
		
		FileSystem fsTarget = FileSystem.get(URI.create(targetPath),conf);
        Path pathTarget = new Path(targetPath);
        if(fsTarget.exists(pathTarget))
        {
      	  	fsTarget.delete(pathTarget, true);
        }
		
        Job job = Job.getInstance(conf);
        job.setJobName("hdfs mr [DevicCheckDetail]" + date);                    
        job.setJarByClass(getClass());
        job.setMapOutputKeyClass(Text.class);
        job.setMapOutputValueClass(Text.class);
        job.setInputFormatClass(TextInputFormat.class);
        job.setReducerClass(DCDReducer.class);
        job.setNumReduceTasks(1);
        
	    String[] paths = inputPaths.split(",");
        for(int i = 0; i < paths.length; i++)
        {
        	MultipleInputs.addInputPath(job,new Path(paths[i]),TextInputFormat.class,DCDMapper.class);
        	System.out.println("----------------paths: "+paths[i]);
        }
        FileOutputFormat.setOutputPath(job,new Path(targetPath));         

        return job.waitForCompletion(true)?0:1;                  
    }

    public static void main(String[] args)throws Exception{
         int exitcode = ToolRunner.run(new DevicCheckDetail(), args);
         System.exit(exitcode);                  
    }   
}

class DCDMapper extends Mapper<LongWritable,Text,Text,Text> {

	@Override
	protected void map(LongWritable key, Text value,
			Mapper<LongWritable, Text, Text, Text>.Context context)
			throws IOException, InterruptedException {
		// TODO Auto-generated method stub
		try{
			String kvs = value.toString() ;
			String split ="|";
			String[] items =kvs.split("\\"+split);
			StringBuffer sb = new StringBuffer();
 			if(items[0] !=  null && items[0].trim().length() > 0){
 				sb.append(items[0].trim()).append(split)
 				.append(items[1].trim()).append(split)
 				.append(items[2].trim()).append(split)
 				.append(items[3].trim());
				context.write(new Text(sb.toString()), new Text(""));
			}
		}catch(Exception E){
			;
		}
	}
	
	
}

class DCDReducer  extends Reducer<Text,Text,Text,Text>{

	public void reduce(Text key, Iterable<Text> values, Context context)
			throws IOException, InterruptedException     
	{
		context.write(key, new Text(""));
	}
	

}


