package com.aotain.project.gdtelecom.identifier.test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Test {

	private static StringBuffer bs = new StringBuffer();
	private static final String REGEX_PHONE = "(=|:)([1][0-9]{10})[;&,}\\s*]{1}";
	public static void main(String[] args) throws UnsupportedEncodingException {
		String cookie =  "X19SZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW49cTBkWkxkREZGbHJhMU5SaXVIajJxV1NCY3FzeFRtbFgyLU4tak1lVzBYS3lNM0c1MnVxLXZQWElXaHZUN1pVYkM0UXMyT2x3V3VHbVZCWThkaTdzZE1mZ3FaTWpOTDUwWktDcDFQZDF4TWcxJlBsYWNlPSVFOCVBNSVCRiVFOCU5NyU4Ri0lRTUlQjElQjElRTUlOEQlOTclRTUlOUMlQjAlRTUlOEMlQkEmQ29uZGl0aW9uPSVFNCVCOSU4MyVFNCVCOCU5QyVFNSU4RSVCRiVFNiVCMyVCRCVFNSVCRCU5MyVFOSU5NSU4NyZDYXRlZ29yeT0lRTclQkQlOTElRTclODIlQjklRTUlOTAlOEQlRTclQTclQjAmdGVtcGxhdGVfbWFwdGlwPSsrKysrKysrKysrKysrKysrKysrJTNDZGl2K2NsYXNzJTNEJTIybmV3cWlwYW9idCUyMitpZCUzRCUyMm1hcHRpcF9iYXIlMjIrb25tb3VzZWRvd24lM0QlMjJkcmFnJTI4dGhpcy5wYXJlbnROb2RlJTJDK2V2ZW50JTJDKyUyN01hcEhvbGRlciUyNyUyOSUzQiUyMitzdHlsZSUzRCUyMmN1cnNvciUzQW1vdmUlM0IlMjIlM0UlMEQlMEErKysrKysrKysrKysrKysrKysrKysrJTNDZGl2K2NsYXNzJTNEJTIybmV3cWlwYW9idGwlMjIlM0UlM0NzcGFuJTNFJTdCU0lURU5BTUUlN0QtJUU0JUI4JUFEJUU5JTgwJTlBJUU3JUJEJTkxJUU3JTgyJUI5JTNDJTJGc3BhbiUzRSUzQyUyRmRpdiUzRSUwRCUwQSsrKysrKysrKysrKysrKysrKysrKyslM0NkaXYrY2xhc3MlM0QlMjJuZXdxaXBhb2J0ciUyMiUzRSUzQ2EraHJlZiUzRCUyMmphdmFzY3JpcHQlM0F2b2lkJTI4MCUyOSUyMitvbkNsaWNrJTNEJTIyY2xvc2VJbmZvV2luZG93JTI4JTI5JTNCJTIyK3N0eWxlJTNEJTIyY3Vyc29yJTNBcG9pbnRlciUzQiUyMiUzRSUzQ2ltZythbHQlM0QlMjIlRTUlODUlQjMlRTklOTclQUQlMjIrc3JjJTNEJTIyJTJGaW1hZ2VzJTJGY2xvc2UuZ2lmJTIyJTNFJTNDJTJGYSUzRSUzQyUyRmRpdiUzRSUwRCUwQSsrKysrKysrKysrKysrKysrKysrKyslM0NkaXYrY2xhc3MlM0QlMjJjbGVhciUyMiUzRSUzQyUyRmRpdiUzRSUwRCUwQSsrKysrKysrKysrKw==";
		cookie = decodepost(cookie);
		cookie = cookie.replaceAll("\\s", " ");
		System.out.println(cookie);
		
		try {
			decodefile("E:\\work\\dev\\6.省电信异网项目\\核数\\特定网站测试\\post指定网站测试\\postin.txt","E:\\work\\dev\\6.省电信异网项目\\核数\\特定网站测试\\post指定网站测试\\postout.txt");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println(findByRegex(cookie, REGEX_PHONE, 2));
	}
	
	public static void decodefile(String filein, String fileout) throws Exception {
		BufferedReader br = new BufferedReader(new FileReader(filein));
		PrintWriter pw = new PrintWriter(fileout);
		String line = null;
		String out = null;
		while((line = br.readLine()) !=null) {
			out =decodepost(line);
			out = out.replaceAll("\\s", " ");
			pw.println(out);
			/*if(out.contains("<div")){
				System.out.println(line);
				break;
			}*/
		}
		pw.flush();
		pw.close();
		br.close();
	} 
	
	protected static String decode(String str) {
		byte[] bt = null;
		try {
			sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
			bt = decoder.decodeBuffer(str);
		} catch (IOException e) {
		}
		return new String(bt);
	}
	
	public static String decodepost(String str) throws UnsupportedEncodingException {
		str  = decode(str);
		if(str.contains("%")) {
			str = str.replaceAll("%(?![0-9a-fA-F]{2})", "%25");
			str = java.net.URLDecoder.decode(str, "utf-8");
		}
		return str;
	}

	public static void formate() {
		String s = String.format("%s,%s,%s,%s,%s,", "a", "a", "a", "a", "a");
	}

	public static void sb() {
		StringBuffer sb = new StringBuffer();
		sb.append("a").append("a").append("a").append("a").append("a").append("a").append("a").append("a").append("a")
				.append("a");
		String s = sb.toString();
	}

	public String parseTelTypeFromName(String name) {
		// Moto RAZR V锋芒（MT887/移动版）
		String regex1 = "（([-a-zA-Z\\d\\s\\+]*)\\/";// 取（到/部分
		String regex2 = "([-a-zA-Z\\d\\s\\+]+)[（]";
		String regex3 = "([-a-zA-Z\\d\\s\\+]+)";
		String result = find(name, regex1);
		if (!isModel(result)) {
			result = find(name, regex2);
		}
		if (!isModel(result)) {
			result = find(name, regex3);
		}
		if (!isModel(result)) {
			result = "";
		}
		return result.toUpperCase();

	}
	
	private static void contains(String str){
		str.contains("iPhone");
	}
	
	private static void match(String str) {
		Matcher pat = Pattern.compile("(iphone.*?)([^\\s\\.a-zA-Z0-9]|\\t|OS|$)", Pattern.CASE_INSENSITIVE).matcher(str);
		pat.find();
		
	}

	private boolean isModel(String model) {
		return model != null && !model.contains("GB") && !model.contains("4G") && !model.contains("3G")
				&& !model.contains("2G");
	}

	private String find(String str, String regex) {
		Pattern pat = Pattern.compile(regex);
		Matcher mat = pat.matcher(str);
		if (mat.find()) {
			return mat.group(1);
		}
		return null;
	}

	public static void bs() {
		bs.append("a").append("a").append("a").append("a").append("a").append("a").append("a").append("a").append("a")
				.append("a");
		String s = bs.toString();
		bs.delete(0, bs.length() - 1);
	}
	
	protected static String findByRegex(String str, String regEx, int group) {
		String resultValue = null;
		if ((str == null) || (regEx == null) || ((regEx != null) && ("".equals(regEx.trim()))))
			return resultValue;

		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(str);

		boolean result = m.find();
		if (result) {
			resultValue = m.group(group);
		}
		return resultValue;
	}
}
