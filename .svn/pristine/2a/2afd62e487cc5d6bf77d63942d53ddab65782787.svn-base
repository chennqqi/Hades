package dmpcommon.config;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;

import dmpcommon.pojo.DeviceProperties;
import dmpcommon.pojo.DeviceRegex;
import dmpcommon.pojo.PropNameEnum;

public class UAConfig {

	private List<DeviceRegex> devices = new ArrayList<DeviceRegex>();
	private Set<String> filter = new HashSet<String>();
	
	/**
	 * 从本地加载配置
	 * @param confFile 本地文件路径
	 */
	public void load(String confFile) {
		InputStream in = null;
		try {
			in = new FileInputStream(confFile);
			load(in);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			throw new RuntimeException("加载配置异常", e);
		} finally{
			if(null != in) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	/**
	 * 从HDFS加载配置
	 * @param hdfsFile hdfs文件路径
	 * @param conf
	 */
	public void load(String hdfsFile, Configuration conf) {
		InputStream in = null;
		try {
			FileSystem fs = FileSystem.get(URI.create(hdfsFile), conf);
			in = fs.open(new Path(hdfsFile));
			load(in);
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException("加载配置异常", e);
		}finally{
			if(null != in) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	/**
	 * 加载配置
	 * @param in
	 */
	public void load(InputStream in) {
		BufferedReader br = null;
		try {
			br = new BufferedReader(new InputStreamReader(in));
			String line = null;
			while((line=br.readLine())!=null) {
				line= line.trim();
				if(line.startsWith("#")) {
					continue;
				}
				if(line.contains("#")) {
					line = line.substring(0, line.indexOf("#"));
				}
				if(line.startsWith("filter:")) {
					filter.add(line.substring("filter:".length()).toUpperCase());
					continue;
				}
				String[] arr = line.split("@@");
				if(arr.length<2){
					continue;
				}
				DeviceRegex t = new DeviceRegex();
				t.setRegex(arr[0].trim());
				String[] pros = arr[1].split("\\|");
				for(int i=0, len=pros.length; i<len; i++) {
					String pro  = pros[i].trim().toUpperCase();
					
					DeviceProperties deviceProperties= new DeviceProperties();
					if(pro.contains("=")){
						deviceProperties.setKey(PropNameEnum.nameOf(pro.split("=")[0]));
						deviceProperties.setValue(pro.split("=")[1]);
					} else {
						deviceProperties.setKey(PropNameEnum.nameOf(pro));
					}
					t.addProp(deviceProperties);
				}
				devices.add(t);
			}
			System.out.println("正则表达式配置加载完成，siez：" + devices.size());
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		} finally {
			try {
				if(br !=null) {
					br.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public List<DeviceRegex> getDevices() {
		return devices;
	}

	public void setDevices(List<DeviceRegex> devices) {
		this.devices = devices;
	}

	public Set<String> getFilter() {
		return filter;
	}

	public void setFilter(Set<String> filter) {
		this.filter = filter;
	}

	public static void main(String[] args) {
		UAConfig conf = new UAConfig();
		conf.load("conf/device.conf");
		System.out.println(conf.getDevices());
	}
	
}
