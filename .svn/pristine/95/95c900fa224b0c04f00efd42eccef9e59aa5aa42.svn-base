package com.aotain.project.gdtelecom.identifier;

import java.io.IOException;
import java.util.List;

import org.apache.hadoop.hive.ql.io.orc.OrcStruct;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class IdentifierPMapper extends IdentifierMapper<NullWritable, OrcStruct> {

	private static final String inputSchema = "struct<url:string,useragent:string,destinationip:string,destinationport:string,"
			+ "sourceport:string,link_info:string,cookie:string,contenttype:string,account_nbr:string,protocol_type:string,"
			+ "sourceip:string,domain:string,visit_time:string,pack_len:string,pack_content:string,is_ip:int,content_type:string>";

	private StructObjectInspector inputOI;

	@Override
	protected void setup(Mapper<NullWritable, OrcStruct, Text, Text>.Context context)
			throws IOException, InterruptedException {
		super.setup(context);
		TypeInfo tfin = TypeInfoUtils.getTypeInfoFromTypeString(inputSchema);
		inputOI = (StructObjectInspector) OrcStruct.createObjectInspector(tfin);
	}

	@Override
	protected void map(NullWritable key, OrcStruct value, Mapper<NullWritable, OrcStruct, Text, Text>.Context context)
			throws IOException, InterruptedException {
		try {
			List<Object> ilst = inputOI.getStructFieldsDataAsList(value);
			if (ilst.size() < 15) {
				return;
			}
			super.reset();
			sUserName = getCol(ilst, 8);
			if (sUserName == null || sUserName.length()==0) {
				return;
			}

			url = getCol(ilst, 0);
			cookie = getCol(ilst, 6);
			domain = getCol(ilst, 11);
			ua = getCol(ilst, 1);
			ip =  getCol(ilst, 2);
			port = getCol(ilst, 3);
			
			handleBase();
			
			pack_contnt = getCol(ilst, 14);
			if (pack_contnt != null) {
				pack_contnt = new String(decode(pack_contnt));
				if (pack_contnt.contains("%")){
					pack_contnt = pack_contnt.replaceAll("%(?![0-9a-fA-F]{2})", "%25");  
					pack_contnt = java.net.URLDecoder.decode(pack_contnt, "utf-8");
				}
				pack_contnt =pack_contnt.replace("\"", "").toLowerCase();
			}
			
			
			String timestamp = getCol(ilst, 12);
			long hour = 10;
			try {
				hour = Long.parseLong(timestamp.substring(8, 10));
			} catch (Exception e) {
			}

			int weight = 1;
			if ((hour >= 21 && hour <= 23) || (hour >= 0 && hour <= 7)) {
				weight = 2;
			}
			weight_device = weight;
			
			imei(weight, context);
			device(context);
			app(weight,context);
			mail(weight, context);
			mac_terminal(weight, context);
			phone(weight, context);
			imsi(weight, context);
			qq(weight, context);
			
			/*if ((hour >= 21 && hour <= 23) || (hour >= 0 && hour <= 7)) {
				parseUA(2, context);
				app(2,context);
				identifierSub(context, 2, url, true, false, phonemap);
				identifierSub(context, 3, cookie, false, true, phonemap);
				identifierSub(context, 2, pack_contnt, false, false, phonemap);
			} else {
				parseUA(1, context);
				app(1,context);
				identifierSub(context, 1, url, true, false, phonemap);
				identifierSub(context, 2, cookie, false, true, phonemap);
				identifierSub(context, 1, pack_contnt, false, false, phonemap);
			}*/
		} catch (Exception e) {
		}

	}

}
