package com.aotain.project.gdtelecom.identifier;

import java.io.IOException;
import java.util.List;

import org.apache.hadoop.hive.ql.io.orc.OrcStruct;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import com.aotain.project.gdtelecom.IdentifierGMapper;

public class IdentifierPMapper_ORC extends IdentifierMapper<NullWritable, OrcStruct> {

	private static final String inputSchema = "struct<url:string,useragent:string,destinationip:string,destinationport:string,"
			+ "sourceport:string,link_info:string,cookie:string,contenttype:string,account_nbr:string,protocol_type:string,"
			+ "sourceip:string,domain:string,visit_time:string,pack_len:string,pack_content:string,is_ip:int,content_type:string>";

	private StructObjectInspector inputOI;
	
	@Override
	protected void setup(Mapper<NullWritable, OrcStruct, Text, Text>.Context context)
			throws IOException, InterruptedException {
		super.setup(context);
		TypeInfo tfin = TypeInfoUtils.getTypeInfoFromTypeString(inputSchema);
		inputOI = (StructObjectInspector) OrcStruct.createObjectInspector(tfin);
	}
	
	@Override
	protected void map(NullWritable key, OrcStruct value, Mapper<NullWritable, OrcStruct, Text, Text>.Context context)
			throws IOException, InterruptedException {
		String sUserName = "";
		try {
			List<Object> ilst = inputOI.getStructFieldsDataAsList(value);

			if (ilst.size() < 15) {
				return;
			}

			String notnk = context.getConfiguration().get("notnk");
			String[] splits = notnk.split(",", -1);
			for (String split : splits) {
				if (split.trim().length() == 3) {
					notkmap.put(split, split);
				}
			}

			String cell = ilst.get(8).toString().trim();
			if (cell != null && cell.length() != 0) {
				sUserName = cell;
				String url = ilst.get(0).toString().trim();
				if (url.contains("%")) {
					url = url.replaceAll("%(?![0-9a-fA-F]{2})", "%25");
					url = java.net.URLDecoder.decode(url, "utf-8");
				}
				url = url.replace("\"", "").toLowerCase();

				String cookie = ilst.get(6).toString().trim();
				if (cookie.contains("%")) {
					cookie = cookie.replaceAll("%(?![0-9a-fA-F]{2})", "%25");
					cookie = java.net.URLDecoder.decode(cookie, "utf-8");
				}
				cookie = cookie.replace("\"", "").toLowerCase();

				String pack_contnt = new String(decode(ilst.get(14).toString().trim()));
				if (pack_contnt.contains("%")) {
					pack_contnt = pack_contnt.replaceAll("%(?![0-9a-fA-F]{2})", "%25");
					pack_contnt = java.net.URLDecoder.decode(pack_contnt, "utf-8");
				}
				pack_contnt = pack_contnt.replace("\"", "").toLowerCase();

				String domain = ilst.get(11).toString().trim();
				String domains[] = domain.split("\\.");
				int domainLength = domains.length;
				String rootDomain = null;
				if (domainLength > 2) {
					rootDomain = domain.substring(domain.indexOf(".") + 1);
				} else {
					rootDomain = domain;
				}
				rootDomain = rootDomain != null ? rootDomain : "null.com";

				String timestamp = ilst.get(12).toString().trim();
				long hour = 10;
				try {
					hour = Long.parseLong(timestamp.substring(8, 10));
				} catch (Exception e) {
					;
					;
				}

				if ((hour >= 21 && hour <= 23) || (hour >= 0 && hour <= 7)) {
					IdentifierGMapper.IdentifierSub(context, sUserName, notkmap, app, domain, rootDomain, 2, url, true,
							false, map);
					IdentifierGMapper.IdentifierSub(context, sUserName, notkmap, app, domain, rootDomain, 3, cookie,
							false, true, map);
					IdentifierGMapper.IdentifierSub(context, sUserName, notkmap, app, domain, rootDomain, 2,
							pack_contnt, false, false, map);
				} else {
					IdentifierGMapper.IdentifierSub(context, sUserName, notkmap, app, domain, rootDomain, 1, url, true,
							false, map);
					IdentifierGMapper.IdentifierSub(context, sUserName, notkmap, app, domain, rootDomain, 2, cookie,
							false, true, map);
					IdentifierGMapper.IdentifierSub(context, sUserName, notkmap, app, domain, rootDomain, 1,
							pack_contnt, false, false, map);
				}
			}
		} catch (Exception e) {
			;
		}
	}

}
