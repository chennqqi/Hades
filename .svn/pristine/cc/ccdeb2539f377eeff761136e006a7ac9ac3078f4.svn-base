package com.aotain.project.gdtelecom.identifier;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import com.aotain.common.CommonFunction;
import com.aotain.common.ObjectSerializer;
import com.aotain.project.gdtelecom.identifier.app.AppAdapter;
import com.aotain.project.gdtelecom.identifier.enums.IdType;
import com.aotain.project.gdtelecom.ua.mapping.DeviceParse;
import com.aotain.project.gdtelecom.ua.pojo.Device;

public class IdentifierMapper<KEYIN, VALUEIN> extends Mapper<KEYIN, VALUEIN, Text, Text> {

	protected Map<String, String> map = new HashMap<String, String>();
	protected Map<String, String> notkmap = new HashMap<String, String>();
	protected Map<String, String> app = new HashMap<String, String>();
	protected DeviceParse deviceParse = new DeviceParse();
	protected AppAdapter appAdapter = new AppAdapter();
	
	private static final String OUT_SPLIT = "|";
	private static final String REGEX_USERNAME = "^([a-zA-Z0-9_\\-\\.]{1,50})@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))(com|cn|net|com.cn|org|gd)(\\]?)$";
	private static final String REGEX_MAIL = "mail(=|:)([\\w[.-]]+@[\\w[.-]]+\\.[\\w]+)[;&,}\\s*]{1}";
	private static final String REGEX_IDFA = "(idfa|idfv)(=|:)(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}";
	private static final String REGEX_IMEI = "imei(=|:|_)(([1-9]{1})\\d{13,14})[;&_,}\\s*]{1}";
	private static final String REGEX_MAC = "(mac|macaddress)(=|:|_)([0-9a-z]{2}(:|-)[0-9a-z]{2}(:|-)[0-9a-z]{2}(:|-)[0-9a-z]{2}(:|-)[0-9a-z]{2}(:|-)[0-9a-z]{2})[;&_,}\\s*]{1}";
	private static final String REGEX_PHONE = "(=|:)([1][0-9]{10})[;&,}\\s*]{1}";
	private static final String REGEX_QQ = "([1-9]\\d{4,11})";
	private static final String REGEX_IMSI = "imsi(=|:|@|_)(([1-9]{1})\\d{14})[;&_,}\\s*]{1}";

	protected Text outvalue = new Text();
	protected Text outkey = new Text();

	protected String sUserName;
	protected String url;
	protected String cookie;
	protected String domain;
	protected String rootDomain;
	protected String ua;
	protected String ip;
	protected String port;
	protected Device device; 
	protected String appName;

	protected void handleBase()
			throws Exception {
		if (url != null) {
			if (url.contains("%")) {
				url = url.replaceAll("%(?![0-9a-fA-F]{2})", "%25");
				url = java.net.URLDecoder.decode(url, "utf-8");
			}
			url = url.replace("\"", "").toLowerCase();
		}

		if (cookie != null) {
			if (cookie.contains("%")) {
				cookie = cookie.replaceAll("%(?![0-9a-fA-F]{2})", "%25");
				cookie = java.net.URLDecoder.decode(cookie, "utf-8");
			}
			cookie = cookie.replace("\"", "").toLowerCase();
		}

		if (domain != null) {
			String domains[] = domain.split("\\.");
			int domainLength = domains.length;
			if (domainLength > 2) {
				rootDomain = domain.substring(domain.indexOf(".") + 1);
			} else {
				rootDomain = domain;
			}
		} else {
			rootDomain = "null.com";
		}

	}

	@Override
	protected void setup(Mapper<KEYIN, VALUEIN, Text, Text>.Context context) throws IOException, InterruptedException {
		String str = context.getConfiguration().get("map");
		map = (HashMap<String, String>) ObjectSerializer.deserialize(str);
		deviceParse.init(context.getConfiguration());
		appAdapter.load(context.getConfiguration().get("APP_CONF"), context.getConfiguration());
		String notnk = context.getConfiguration().get("notnk");
		String[] splits = notnk.split(",", -1);
		for (String split : splits) {
			if (split.trim().length() == 3) {
				notkmap.put(split, split);
			}
		}
		app.put("kepler.jd.com",
				"1::deviceid=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("market.m.sjzhushou.com",
				"1::ifa:(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("yktd.m.cn.miaozhen.com",
				"2::(m0|m5)=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("vyk.admaster.com.cn",
				"2::(o|z)(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("m.game.weibo.cn",
				"1::deviceid=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("ad.ximalaya.com",
				"2::(adid|udid)=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("54.222.190.235",
				"1::tdid=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("capi.douyucdn.cn",
				"1::devid=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("ark.letv.com",
				"1::did=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("passport.iqiyi.com",
				"1::device_id=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("paopao.iqiyi.com",
				"1::m_device_id=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("search.video.qiyi.com",
				"1::u=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("subscription.iqiyi.com",
				"1::ckuid=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("iface.iqiyi.com",
				"2::(qyid|cupid_uid)=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("iface2.iqiyi.com",
				"2::(qyid|cupid_uid)=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("msg.71.am",
				"2::(u|uid)=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("api.yuedu.iqiyi.com",
				"1::qiyiid=(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");
		app.put("mi.gdt.qq.com",
				"1::m5:(([a-z0-9]{8})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{4})-([a-z0-9]{12}))[;&,}\\s*]{1}");

	}

	protected static String findByRegex(String str, String regEx, int group) {
		String resultValue = null;
		if ((str == null) || (regEx == null) || ((regEx != null) && ("".equals(regEx.trim()))))
			return resultValue;

		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(str);

		boolean result = m.find();
		if (result) {
			resultValue = m.group(group);
		}
		return resultValue;
	}

	/**
	 * 解析出APP
	 * @throws InterruptedException 
	 * @throws IOException 
	 */
	protected void parseApp(int k, Context context) {
		if(device == null || device.getName() == null){
			return;
		}
		try {
			appName = appAdapter.getAppFromDomain(domain);
			if (appName == null) {
				appName = appAdapter.getAppFromIp(ip, port);
				if (appName == null) {
					appName = appAdapter.getAppFromUrl(url);
					if (appName == null) {
						appName = appAdapter.getAppFromUa(ua);
					}
				}
			}
			if (appName != null) {
				outvalue.set(k + "|" + rootDomain);
				contextWrite(context, IdType.APP_TERMINAL.getId(), new StringBuffer(device.getVendor()).append("#")
						.append(device.getName()).append("#").append(appName));
			}
		} catch (Exception e) {
		}
	}
	
	/**
	 * 解析ua,获取终端
	 * @param k 权重
	 * @param context
	 * @throws IOException
	 * @throws InterruptedException
	 */
	protected void parseUA(int k, Context context){
		try {
			outvalue.set(k + "|" + rootDomain);
			device = null;
			// 解析UA，获取终端
			if (null != ua && !ua.trim().equals("") && !CommonFunction.isMessyCode(ua)) {
				device = deviceParse.getDevice(ua);
				// terminal
				if (device != null && device.getName() != null) {
					contextWrite(context, IdType.TERMIAL.getId(), device.getVendor() + "#" + device.getName());
				}
			}
		} catch (Exception e) {
		}
		
	}

	/**
	 * 用户标识处理
	 * @param context
	 * @param k 权重
	 * @param tp 解析的源
	 * @param idfaflag 当从tp获取不到IDFA时，是否从domain获取表达式，再解析一次IDFA
	 * @param qqflag 是否解析QQ
	 * @param phonemap 号码map
	 * @throws IOException
	 * @throws InterruptedException
	 */
	protected void identifierSub(Context context, int k, String tp, boolean idfaflag,
			boolean qqflag, Map<String, String> phonemap) throws IOException, InterruptedException {
		if (null == tp) {
			return;
		}

		String temp;
		outvalue.set(k + "|" + rootDomain);

		// mail
		temp = findByRegex(tp, REGEX_MAIL, 2);
		if (temp != null && temp.length() <= 35 && !temp.endsWith(".com.cn")
				&& (temp.endsWith(".com") || temp.endsWith(".cn"))) {
			contextWrite(context, IdType.MAIL.getId(), temp);
		}

		// imei
		temp = findByRegex(tp, REGEX_IMEI, 2);
		if (temp != null) {
			contextWrite(context, IdType.IMEI.getId(), temp);
		}

		// mac_terminal
		if (device != null && device.getName() != null) {
			temp = findByRegex(tp, REGEX_MAC, 3);
			if (temp != null) {
				temp = temp.replace("-", ":").toUpperCase();
				contextWrite(context, IdType.MAC_TERMINAL.getId(), new StringBuffer(temp).append("#").append(device.getVendor()).append("#").append(device.getName()));
			}
		}
		
		// idfa
		/*temp = findByRegex(tp, REGEX_IDFA, 3);
		if (temp != null) {
			temp = temp.toUpperCase();
			contextWrite(context, IdType.IDFA.getId(), temp);
		} else {
			if (idfaflag) {
				String lishj = app.get(domain);
				if (lishj != null) {
					String[] lishjs = lishj.split("::");
					temp = findByRegex(tp, lishjs[1], Integer.parseInt(lishjs[0]));
					if (temp != null) {
						temp = temp.toUpperCase();
						contextWrite(context, IdType.IDFA.getId(), temp);
					}
				}
			}
		}
*/

		// phone
		temp = findByRegex(tp, REGEX_PHONE, 2);
		if (temp != null) {
			String p3 = temp.substring(0, 3);
			String p7 = temp.substring(0, 7);
			if (phonemap.get(p7) != null || notkmap.get(p3) != null) {
				contextWrite(context, IdType.PHONE.getId(), temp);

				// phone_terminal
				if (device != null && device.getName() != null) {
					contextWrite(context, IdType.PHONE_TERMINAL.getId(), new StringBuffer(temp).append("#").append(device.getVendor()).append("#").append(device.getName()));
				}
			}

		}

		// imsi
		temp = findByRegex(tp, REGEX_IMSI, 2);
		if (temp != null) {
			contextWrite(context, IdType.IMSI.getId(), temp);
		}

		// qq
		if (qqflag) {
			if (domain.contains("qq.com")) {
				if (tp.indexOf("o_cookie") != -1) {
					temp = tp.substring(tp.indexOf("o_cookie"), tp.length());
					if (temp.indexOf(";") != -1) {
						temp = temp.substring(0, temp.indexOf(";"));
						if (temp.split("=").length == 2) {
							temp = temp.split("=")[1];
							temp = findByRegex(temp, REGEX_QQ, 0);
							if (temp != null) {
								contextWrite(context, IdType.QQACCOUNT.getId(), temp);
							}
						}
					}
				}
			}
		}

	}
	
	private void contextWrite(Context context, String id,String attvalue) throws IOException, InterruptedException{
		StringBuffer sb = new StringBuffer();
		sb.append(id).append(OUT_SPLIT).append(sUserName).append(OUT_SPLIT).append(attvalue);
		outkey.set(sb.toString());
		context.write(outkey, outvalue);
	}
	
	protected void contextWrite(Context context, String id,StringBuffer attvalue) throws IOException, InterruptedException{
		StringBuffer sb = new StringBuffer();
		sb.append(id).append(OUT_SPLIT).append(sUserName).append(OUT_SPLIT).append(attvalue);
		outkey.set(sb.toString());
		context.write(outkey, outvalue);
	}

	protected static boolean validateUser(String username) {
		return CommonFunction.findByRegex(username, REGEX_USERNAME, 0) == null;
	}

	protected byte[] decode(String str) {
		byte[] bt = null;
		try {
			sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();
			bt = decoder.decodeBuffer(str);
		} catch (IOException e) {
		}
		return bt;
	}

	protected String getCol(List<Object> list, int index) {
		Object obj = list.get(index);
		return null == obj ? null : obj.toString().trim();
	}
}
