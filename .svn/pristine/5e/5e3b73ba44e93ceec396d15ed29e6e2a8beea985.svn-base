package com.aotain.project.gdtelecom.phone;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.hadoop.hive.ql.io.orc.OrcStruct;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import com.aotain.common.CommonFunction;
import com.aotain.common.ObjectSerializer;
import com.aotain.project.gdtelecom.ua.mapping.DeviceParse;
import com.aotain.project.gdtelecom.ua.pojo.Device;

public class IdentifierORCMapper extends Mapper<NullWritable,OrcStruct,Text,Text>{
	 
	final static String inputSchema = "struct<areaid:string,username:string,srcip:string,domain:string,"
			+ "url:string,refer:string,opersys:string,opersysver:string,browser:string,"
			+ "browserver:string,device:string,accesstime:bigint,cookie:string,keyword:string,"
			+ "urlclassid:string,referdomain:string,referclassid:string,ua:string,"
			+ "destinationip:string,sourceport:string,destinationport:string>";
	static StructObjectInspector inputOI;
	private static Map<String,String> map=new HashMap<String,String>();
	private Map<String,String> notkmap=new HashMap<String,String>();
	protected DeviceParse deviceParse = new DeviceParse();
	
	public void setup(Context context) throws IOException,
				InterruptedException {
			super.setup(context);
			TypeInfo tfin = TypeInfoUtils
					.getTypeInfoFromTypeString(inputSchema);
			inputOI = (StructObjectInspector) OrcStruct
					.createObjectInspector(tfin);
			String str = context.getConfiguration().get("map");
			map  = ( HashMap<String,String>) ObjectSerializer
			            .deserialize(str);
			deviceParse.init(context.getConfiguration());	
			String notnk = context.getConfiguration().get("notnk");
			String[] splits = notnk.split(",", -1);
			for (String split : splits) {
				if (split.trim().length() == 3) {
					notkmap.put(split, split);
				}
			}
		}

	 
	public void map(NullWritable key, OrcStruct value, Context context) 
			throws IOException, InterruptedException{
		String sUserName = "";
		 
		try
       {		
			  List<Object> ilst = inputOI.getStructFieldsDataAsList(value);
			  if( ilst.size() != 21){
				  return;
			  }
			  
			String cell =ilst.get(1).toString();
			if (!validateUser(cell)) {
				sUserName = cell;
				String url = ilst.get(4).toString().trim();
				if (url.contains("%")){
					url = url.replaceAll("%(?![0-9a-fA-F]{2})", "%25");  
					url = java.net.URLDecoder.decode(url, "utf-8");
				}
				url = url.replace("\"", "").toLowerCase();
				
				String cookie = ilst.get(12).toString().trim();
				if (cookie.contains("%")){
					cookie = cookie.replaceAll("%(?![0-9a-fA-F]{2})", "%25");  
					cookie = java.net.URLDecoder.decode(cookie, "utf-8");
				}
				cookie = cookie.replace("\"", "").toLowerCase();
				
				String domain = ilst.get(3).toString().trim();
				String domains[] = domain.split("\\.");
				int domainLength = domains.length;
				String rootDomain = null;
				if(domainLength > 2) {
						 rootDomain = domain.substring(domain.indexOf(".")+1); 
				}else{
					     rootDomain = domain;
				}
				rootDomain = rootDomain != null ? rootDomain : "null.com";
				
				String timestamp = ilst.get(11).toString().trim();
				long hour = 10;
				try {
					hour = Long.parseLong(timestamp.substring(8, 10));
				} catch (Exception e) {
					; ;
				}
				 
				String ua = ilst.get(17).toString();
				
				if((hour >= 21 && hour <= 23) || (hour >= 0 && hour <= 7)){
					 IdentifierSub(context, sUserName, notkmap, rootDomain, 2,url,ua);
					 IdentifierSub(context, sUserName, notkmap, rootDomain, 3,cookie,ua);
				}else{
					 IdentifierSub(context, sUserName, notkmap, rootDomain, 1,url,ua);
					 IdentifierSub(context, sUserName, notkmap, rootDomain, 2,cookie,ua);
				}
				}
		}
		catch (Exception e)  {;}
		
	}
	
	 
	 private static boolean validateUser(String username){
		boolean ret = false;
		String aa = CommonFunction.findByRegex(username, "^([a-zA-Z0-9_\\-\\.]{1,50})@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))(com|cn|net|com.cn|org|gd)(\\]?)$", 0);
		if(aa == null)
		{
			ret = true;
		}
		
		return ret;
	}
	 
	 public static String findByRegex(String str, String regEx, int group)
	 	{
	 		String resultValue = null;
	 		if ((str == null) || (regEx == null) || ((regEx != null) && ("".equals(regEx.trim())))) 
	 			return resultValue;
	 		
	 		
	 		Pattern p = Pattern.compile(regEx);
	 		Matcher m = p.matcher(str);

	 		boolean result = m.find();
	 		if (result)
	 		{
	 			resultValue = m.group(group);
	 		}
	 		return resultValue;
	 	}
	 
		private void IdentifierSub(Context context, String sUserName,
				Map<String, String> notkmap,
				 String rootDomain, int k, String tp,String ua)
				throws IOException, InterruptedException {
			String temp;
			Text outv = new Text(k + "|" + rootDomain);
			
			//phone
			temp =  findByRegex(tp, "(=|:)([1][0-9]{10})[;&,}\\s*]{1}", 2);
			if(temp != null)
			{
				String p3 = temp.substring(0, 3);
				String p7 = temp.substring(0, 7);
				if (map.get(p7) != null  || notkmap.get(p3) != null) {

					if(null == ua || ua.trim().equals("") || CommonFunction.isMessyCode(ua)) {
						return;
					}
					Device  device  = deviceParse.getDevice(ua);
					if(device != null  && device.getName() != null){
						context.write(new Text("5|"+sUserName+"|"+temp+","+device.getVendor() + "#" + device.getName()), outv);
					}
				
				}
			}
		}
	 
}